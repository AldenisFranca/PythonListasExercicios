# -*- coding: utf-8 -*-
"""Lista_Exercicios6_Aldenis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ucl_5JORFI4PehPnSGlLbw717O3h8xGB

###IFPE Jaboat√£o
###Tecnologia em An√°lise e Desenvolvimento de Sistemas
###Disciplina: L√≥gica de Programa√ß√£o
###Professora: Havana Alves
###Aluno: Aldenis Everton Alves Guilherme de Fran√ßa

##Lista de Exerc√≠cios 6

1) Escreva uma fun√ß√£o que receba o tamanho de dois catetos de um tri√¢ngulo
como seus par√¢metros e calcule a hipotenusa. A fun√ß√£o deve apenas imprimir o
resultado.
"""

def hipotenusa(c1,c2):
  h = ((c1**2) + c2**2)**(1/2)
  return round(h,2)

hipotenusa(10,8)

"""2) Uma empresa de log√≠stica realiza entrega expressa a RS 59.67 pelo primeiro
item, e a RS 16,07 para cada item a mais. Escreva uma fun√ß√£o que receba a
quantidade de itens como par√¢metro. A fun√ß√£o deve retornar o valor que o
cliente ir√° pagar. Utilize essa fun√ß√£o em um programa que pe√ßa a quantidade de
itens ao cliente e que depois exiba o valor a ser pago.
"""

def custo_logistico(n):
  if n <= 0:
    print('\nVoc√™ digitou um n√∫mero inv√°lido!')
  else:
    custo = 59.67 + (n-1)*16.07
    return custo

itens = int(input(f'Digite a quantidade de itens: '))
c = custo_logistico(itens)
print(f'\nO Custo Log√≠stico √© de R$ {c:.2f}')

"""3) Se voc√™ possui tr√™s retas, que podem ser ou n√£o de comprimentos diferentes,
estas podem formar um tri√¢ngulo, ou n√£o. Dados os lados a, b e c, √© necess√°rio
que todas as condi√ß√µes a seguir sejam atendidas para que um tri√¢ngulo possa
ser formado :

| b - c | < a < b + c

| a - c | < b < a + c

| a - b | < c < a + b

Escreva uma fun√ß√£o que receba uma lista com os tr√™s comprimentos e retorne
um booleano que indique se formam um tri√¢ngulo v√°lido ou n√£o. Um programa
deve chamar esta fun√ß√£o. Neste programa os tr√™s lados devem ser solicitados
ao usu√°rio, e deve ser exibido a ele se os valores inseridos possibilitam a
exist√™ncia de um tri√¢ngulo.
"""

def existe_triangulo(r1, r2, r3):
  if abs(r2 - r3) < r1 < (r2 + r3) and abs(r1 - r3) < r2 < (r1 + r3) and abs(r1 - r2) < r3 < (r1 + r2):
    return True

r = []
for i in range(1,4):
  retas = float(input(f'Digite o valor da {i}¬™ reta: ').replace(',','.'))
  r.append(retas)

if existe_triangulo(r[0],r[1],r[2]) == True:
  print('\nEssas tr√™s retas formam um Tri√¢ngulo.')
else:
  print('\nN√£o √© poss√≠vel formar um Tri√¢ngulo com essas retas.')

"""4) Escreva uma fun√ß√£o que receba o total gasto pelo cliente e a op√ß√£o de
pagamento, que pode ser:

1) Op√ß√£o: √† vista com 10% de desconto

2) Op√ß√£o: em duas vezes (pre√ßo da etiqueta)

3) Op√ß√£o: de 3 at√© 10 vezes com 3% de juros ao m√™s (somente para compras
acima de R$ 100,00).

Chame esta fun√ß√£o em um programa que receba estes dados do usu√°rio.
"""

def gastosCliente(total_gasto):
  print('')
  print('-' * 60)
  print('{:^60}'.format('OP√á√ïES DE PAGAMENTO'))
  print('-' * 60)
  if 0 < total_gasto <= 100:
    opcao_pgto = int(input(f'\nEscolha a op√ß√£o de pagamento:\n1 - √Ä vista com 10% de desconto\n2 - Em 2x sem juros\nDigite 1 ou 2: '))
    
    if opcao_pgto == 1:
      valor_pagar = total_gasto * 0.9
      return print(f'\nVoc√™ ir√° pagar R$ {valor_pagar:.2f}')
    elif opcao_pgto == 2:
      valor_pagar = total_gasto / 2
      return print(f'\nVoc√™ ir√° pagar duas parcelas de R$ {valor_pagar:.2f} cada.')
    else:
      return print(f'\nVoc√™ digitou um n√∫mero inv√°lido.')

  elif total_gasto > 100:
    opcao_pgto = int(input(f'\nEscolha a op√ß√£o de pagamento:\n1 - √Ä vista com 10% de desconto.\n2 - Em 2x sem juros.\n3 - De 3 a 10x com juros de 3% a.m.\nDigite 1, 2 ou 3: '))
    if opcao_pgto == 1:
      valor_pagar = total_gasto * 0.9
      return print(f'\nVoc√™ ir√° pagar R$ {valor_pagar:.2f}')
    elif opcao_pgto == 2:
      valor_pagar = total_gasto / 2
      return print(f'\nVoc√™ ir√° pagar duas parcelas de R$ {valor_pagar:.2f} cada.')
    elif opcao_pgto == 3:
      parcelas = int(input(f'\nVoc√™ deseja dividir em quantas vezes (de 3 a 10x): '))
      if parcelas < 3 or parcelas > 10:
        return print(f'\nVoc√™ digitou um n√∫mero inv√°lido.')
      else:
        valor_pagar = (total_gasto * 1.03) / parcelas
        return print(f'\nVoc√™ ir√° pagar {parcelas} parcelas de R$ {valor_pagar:.2f} cada.')
    else:
      return print('\nVoc√™ digitou um n√∫mero inv√°lido.')
  
  else:
    return print('\nVoc√™ digitou um n√∫mero inv√°lido.')

compras = float(input(f'Digite o valor gasto pelo cliente: R$ ').replace(',','.'))
gastosCliente(compras)

"""5) Sabendo que a f√≥rmula do c√°lculo da dist√¢ncia percorrida de um ve√≠culo em um
movimento uniformemente variado √© dado por x = v 0 *t + a*t¬≤ e que a f√≥rmula da
velocidade final √© dada por v f = v 0 + a*t, crie uma fun√ß√£o que receba a velocidade final, o tempo e a acelera√ß√£o do ve√≠culo e retorne a dist√¢ncia
percorrida.
"""

def MUV(velFinal,tempo,acel):
  unidTempo = input('Informe a unidade de tempo utilizada [h, m ou s]: ').strip()[0]
  velFinal = (velFinal / 3.6)
  if unidTempo in 'sS':
    tempo = tempo
  elif unidTempo in 'mM':
    tempo = tempo * 60
  elif unidTempo in 'hH':
    tempo = tempo * 3600
  else:
    print('Unidade Inv√°lida!')

  v0 = velFinal - (acel * tempo)
  s0 = (v0 * tempo) + ((acel * (tempo ** 2)) / 2)
  return print(f'\nA Dist√¢ncia Percorrida em km foi de: {(s0 / 1000):.2f} km.')

print('')
print('-' * 50)
print('{:^50}'.format('DIST√ÇNCIA PERCORRIDA POR UM VE√çCULO'))
print('-' * 50)

velFinal = float(input('Informe a Velocidade Final, em km/h: '))
tempo = float(input('Informe o Tempo percorrido: '))
acel = float(input('Informe a Acelera√ß√£o, em m/s¬≤: '))

MUV(velFinal,tempo,acel)

"""6) Escreva uma fun√ß√£o que gere uma senha aleat√≥ria. A senha deve ter um
tamanho aleat√≥rio que pode ser de 7 a 10 caracteres. Cada caracter deve ser
randomicamente escolhido das posi√ß√µes 33 a 126 da tabela ASCII. A fun√ß√£o
n√£o deve receber par√¢metros, apenas retornar a senha pronta quando for
chamada. Um programa deve chamar a fun√ß√£o e imprimir a senha gerada.
"""

def senhaAleatoria():
  from random import randint
  qtdCarac = randint(7,10)
  
  for i in range(0, qtdCarac):
    caracter = randint(33,126)
    dec2asc = chr(caracter)
    senha = print(''.join(dec2asc), end='')
  return senha

print('')
print('-' * 40)
print('{:^40}'.format('PRIMEIRO ACESSO - CADASTRO'))
print('-' * 40)

login = input(str('\nInforme um login: '))
opcaoSenha = int(input('\nPara sua senha, escolha:\n1 - Para gerar uma senha aleat√≥ria.\n2 - Para criar sua pr√≥pria senha.\nDigite 1 ou 2: '))
if opcaoSenha == 1:
  print(f'\nSeu Login: {login}\nSua Senha: ', end='')
  senhaAleatoria()
elif opcaoSenha == 2:
  senha = input('Digite sua senha de 7 a 10 caracteres: ')
  print(f'\nSeu Login: {login}\nSua Senha: {senha}')
else:
  print('\nVoc√™ digitou um n√∫mero inv√°lido.')

"""7) A fun√ß√£o que indica a concentra√ß√£o de √°lcool no sangue de uma pessoa em
rela√ß√£o ao tempo √© dada por N(t) = -0.008(t2 - 35t + 34). Considere
que uma pessoa come√ßou a beber no tempo t0, em que N(t0) = 0, partindo de um
estado de sobriedade, e que parou de beber no tempo t1 e que em t2 voltou ao
estado de sobriedade. A fun√ß√£o tem gr√°fico exibido na imagem a seguir:

Sabendo que temos as seguintes f√≥rmulas referentes a uma fun√ß√£o de 2¬∫ grau:
V√©rtices da fun√ß√£o: xv = -b/2a yv = -Œî/4a
Delta: Œî = b2 - 4ac
B√°skhara: ùë• = ‚àí ùëè ¬± Œî/2ùëé

Crie fun√ß√µes em Python que utilizem as f√≥rmulas corretas para saber qual o
m√°ximo de concentra√ß√£o de √°lcool que a pessoa ir√° alcan√ßar e em quanto tempo isto
ir√° acontecer, e com quanto tempo ap√≥s o in√≠cio da cacha√ßada o indiv√≠duo ficar√° s√≥brio,
baseando-se nas informa√ß√µes fornecidas? Estas fun√ß√µes devem ser utilizadas em um programa que ir√° exibir as informa√ß√µes calculadas.
"""

def concentMaxAlc():
  coeficiente = -0.008
  a = 1
  b = -35
  c = 34
  delta = (b**2) - 4*a*c
  concMax = round(- delta / (4*a),2)*coeficiente
  return concMax

def timeMaxConc():
  a = 1
  b = -35
  tempo = -b / (2*a)
  return tempo

def tempoSobrio():
  coeficiente = -0.008
  a = 1
  b = -35
  c = 34
  delta = (b**2) - 4*a*c
  raiz1 = (-b + (delta)**(1/2)) / 2*a
  raiz2 = (-b - (delta)**(1/2)) / 2*a
  if raiz1 < raiz2:
    return (raiz2-raiz1)
  else:
    return (raiz1-raiz2)

print('')
print('-' * 80)
print('{:^80}'.format('CONCENTRA√á√ÉO DE √ÅLCOOL NO CORPO HUMANO'))
print('-' * 80)
print('')

c = concentMaxAlc()
print(f'M√°ximo de Concentra√ß√£o de √Ålcool que uma pessoa pode alcan√ßar em seu corpo: {c} g/L', end='')

tmax = timeMaxConc()
print(f'\n\nTempo que a pessoa ir√° atingir esse n√≠vel m√°ximo de concentra√ß√£o de √°lcool no corpo: {tmax} horas.', end='')

sobrio = tempoSobrio()
print(f'\n\nO indiv√≠duo ficar√° s√≥brio ap√≥s {sobrio} horas do in√≠cio da cacha√ßada.', end='')

"""8) Para ler um arquivo de .txt simples no Python, podemos utilizar a fun√ß√£o open(),
que tem como par√¢metro obrigat√≥rio o nome ou caminho onde est√° o arquivo.
Outro par√¢metro importante, mas que j√° tem um valor padr√£o definido √© o mode.
Este par√¢metro indica em que modo o arquivo ser√° aberto, como √© poss√≠vel ver
na tabela a seguir:

Caso nenhum valor seja definido para mode, o padr√£o √© mode=‚Äôr‚Äô. Existem
outros par√¢metros padr√£o que voc√™ pode conhecer nesse link
https://docs.python.org/3/library/functions.html#open.

Quando a fun√ß√£o open √© utilizada em modo leitura, ela retorna uma lista em que
cada elemento √© uma linha escrita do arquivo. Com estas informa√ß√µes, crie duas
fun√ß√µes, uma para ler e exibir os dados de um arquivo e outra para escrever de
forma incremental os textos que o usu√°rio for inserindo. Estas fun√ß√µes devem
ser chamados por um ou mais programas. O de escrita deve ser chamado
enquanto o usu√°rio inserir textos n√£o-vazios. Ao final, o programa deve exibir o
arquivo depois de escrito. Obs: N√£o esquecer de fechar o arquivo no fim da
leitura e da escrita.
"""

def Ler_Exibir_Dados(arquivo):
  with open(arquivo,'r') as file: # with fecha o arquivo
    texto = file.readlines()
    return texto

def Escrever(arquivo):
  while True:
    dado = str(input('Digite informa√ß√µes para serem escritas no arquivo: '))
    print('')
    if dado == '':
      print('DADOS INSERIDOS NO ARQUIVO!')
      break
    with open(arquivo,'a') as arq: # with fecha o arquivo
      arq.write(dado)

print('')
print('-' * 50)
print('{:^50}'.format('LENDO E ESCREVENDO EM UM ARQUIVO'))
print('-' * 50)
print('')

Escrever('planilhas.txt')

print('Este √© o texto completo com os dados informados:\n ')
Ler_Exibir_Dados('planilhas.txt')

